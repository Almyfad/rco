// <auto-generated />
using System;
using Helios.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeliosDataBaseContext.Migrations
{
    [DbContext(typeof(HeliosContext))]
    [Migration("20250622223744_Delete mailingList")]
    partial class DeletemailingList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ActiviteeTypeMembre", b =>
                {
                    b.Property<int>("ActiviteesId")
                        .HasColumnType("int");

                    b.Property<int>("AspectsId")
                        .HasColumnType("int");

                    b.HasKey("ActiviteesId", "AspectsId");

                    b.HasIndex("AspectsId");

                    b.ToTable("ActiviteeTypeMembre");
                });

            modelBuilder.Entity("Helios.Context.Models.Activitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("TypeActiviteeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("TypeActiviteeId");

                    b.ToTable("Activitees", (string)null);
                });

            modelBuilder.Entity("Helios.Context.Models.Centre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("longtext");

                    b.Property<int?>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Pays")
                        .HasColumnType("longtext");

                    b.Property<int>("TypeCentreId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("longtext");

                    b.Property<long?>("brevoFolderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TypeCentreId");

                    b.ToTable("Centres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "",
                            Code = "MG",
                            CodePostal = "93120",
                            Libelle = "MontGivroux",
                            Pays = "France",
                            TypeCentreId = 100
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "",
                            Code = "PO",
                            CodePostal = "93120",
                            Libelle = "Poitier",
                            Pays = "France",
                            TypeCentreId = 100
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "",
                            Code = "LC",
                            CodePostal = "93120",
                            Libelle = "La Licorne",
                            Pays = "France",
                            TypeCentreId = 100
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "",
                            Code = "PR",
                            CodePostal = "93120",
                            Libelle = "Paris",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 5,
                            Adresse = "",
                            Code = "LY",
                            CodePostal = "69000",
                            Libelle = "Lyon",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 6,
                            Adresse = "",
                            Code = "MA",
                            CodePostal = "13000",
                            Libelle = "Marseille",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 7,
                            Adresse = "",
                            Code = "TO",
                            CodePostal = "31000",
                            Libelle = "Toulouse",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 8,
                            Adresse = "",
                            Code = "GP",
                            CodePostal = "97100",
                            Libelle = "Guadeloupe",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 9,
                            Adresse = "",
                            Code = "AX",
                            CodePostal = "97100",
                            Libelle = "Aix-en-Provence",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 10,
                            Adresse = "",
                            Code = "LL",
                            CodePostal = "97100",
                            Libelle = "Lille",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 11,
                            Adresse = "",
                            Code = "MT",
                            CodePostal = "97100",
                            Libelle = "Metz",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 12,
                            Adresse = "",
                            Code = "MP",
                            CodePostal = "97100",
                            Libelle = "Montptelier",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 13,
                            Adresse = "",
                            Code = "PP",
                            CodePostal = "97100",
                            Libelle = "Perpignan",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 14,
                            Adresse = "",
                            Code = "CA",
                            CodePostal = "97100",
                            Libelle = "Côte d'Azure",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 15,
                            Adresse = "",
                            Code = "RE",
                            CodePostal = "97100",
                            Libelle = "Rennes",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 16,
                            Adresse = "",
                            Code = "RU",
                            CodePostal = "97100",
                            Libelle = "Rouen",
                            Pays = "France",
                            TypeCentreId = 200
                        },
                        new
                        {
                            Id = 17,
                            Adresse = "",
                            Code = "SB",
                            CodePostal = "97100",
                            Libelle = "Strasbourg",
                            Pays = "France",
                            TypeCentreId = 200
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.Civilite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Civilites", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "Monsieur",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Monsieur"
                        },
                        new
                        {
                            Id = 200,
                            Code = "Madame",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Madame"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.Droit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CentreId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("utilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("utilisateurId");

                    b.ToTable("Droits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            ModuleId = 1000
                        },
                        new
                        {
                            Id = 2,
                            Code = 1,
                            ModuleId = 2000
                        },
                        new
                        {
                            Id = 3,
                            Code = 1,
                            ModuleId = 2100
                        },
                        new
                        {
                            Id = 4,
                            Code = 1,
                            ModuleId = 2200
                        },
                        new
                        {
                            Id = 5,
                            Code = 1,
                            ModuleId = 50000
                        },
                        new
                        {
                            Id = 6,
                            CentreId = 1,
                            Code = 200,
                            ModuleId = 3000,
                            utilisateurId = 4
                        },
                        new
                        {
                            Id = 7,
                            CentreId = 1,
                            Code = 200,
                            ModuleId = 3010,
                            utilisateurId = 4
                        },
                        new
                        {
                            Id = 8,
                            CentreId = 1,
                            Code = 200,
                            ModuleId = 4000,
                            utilisateurId = 4
                        },
                        new
                        {
                            Id = 9,
                            CentreId = 2,
                            Code = 100,
                            ModuleId = 3000,
                            utilisateurId = 4
                        },
                        new
                        {
                            Id = 10,
                            CentreId = 2,
                            Code = 200,
                            ModuleId = 2300,
                            utilisateurId = 4
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.Inscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiviteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Infos")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteeId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Inscriptions", (string)null);
                });

            modelBuilder.Entity("Helios.Context.Models.Membre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("longtext");

                    b.Property<int?>("CentreId")
                        .HasColumnType("int");

                    b.Property<int>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<string>("Commentaires")
                        .HasColumnType("longtext");

                    b.Property<string>("Connaissances")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("DateNaissance")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailValide")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pays")
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Profession")
                        .HasColumnType("longtext");

                    b.Property<int>("StatutMembreId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext");

                    b.Property<int>("TypeMembreId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("CiviliteId");

                    b.HasIndex("StatutMembreId");

                    b.HasIndex("TypeMembreId");

                    b.ToTable("Membres", (string)null);
                });

            modelBuilder.Entity("Helios.Context.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrefixIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("SuffixIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Code = 1000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "home",
                            Label = "Accueil",
                            Path = "/",
                            PrefixIcon = "grass",
                            SuffixIcon = "grass",
                            Title = "Bienvenue dans votre Espace Intranet"
                        },
                        new
                        {
                            Id = 6000,
                            Code = 6000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "email",
                            Label = "Mailing",
                            Path = "/mailing"
                        },
                        new
                        {
                            Id = 6100,
                            Code = 6100,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "list",
                            Label = "Listes",
                            ParentId = 6000,
                            Path = "/mailing/listes"
                        },
                        new
                        {
                            Id = 6200,
                            Code = 6200,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "campaign",
                            Label = "Campagnes",
                            ParentId = 6000,
                            Path = "/mailing/campagnes"
                        },
                        new
                        {
                            Id = 2000,
                            Code = 2000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "temple_buddhist",
                            Label = "Conférence",
                            Path = "/conferences"
                        },
                        new
                        {
                            Id = 2300,
                            Code = 2300,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "post_add",
                            Label = "Créer Conférence",
                            ParentId = 2000,
                            Path = "/creer/conference"
                        },
                        new
                        {
                            Id = 2100,
                            Code = 2100,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "person_add",
                            Label = "Inscription",
                            ParentId = 2000,
                            Path = "/conferences/inscription"
                        },
                        new
                        {
                            Id = 2200,
                            Code = 2200,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "edit",
                            Label = "Mes Inscriptions",
                            ParentId = 2000,
                            Path = "/mesinscriptions"
                        },
                        new
                        {
                            Id = 3000,
                            Code = 3000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "book",
                            Label = "Registre",
                            Path = "/registre"
                        },
                        new
                        {
                            Id = 3010,
                            Code = 3010,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "people",
                            Label = "Fiches Elèves",
                            ParentId = 3000,
                            Path = "/registre/fiches/eleves"
                        },
                        new
                        {
                            Id = 3020,
                            Code = 3020,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "wb_iridescent",
                            Label = "Fiches Parvis",
                            ParentId = 3000,
                            Path = "/registre/fiches-parvis"
                        },
                        new
                        {
                            Id = 3030,
                            Code = 3030,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "contact_page",
                            Label = "Fiches Contacts",
                            ParentId = 3000,
                            Path = "/registre/fiches-contacts"
                        },
                        new
                        {
                            Id = 3040,
                            Code = 3040,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "child_care",
                            Label = "Fiches Jeunesses",
                            ParentId = 3000,
                            Path = "/registre/fiches-jeunesses"
                        },
                        new
                        {
                            Id = 3050,
                            Code = 3050,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "settings_accessibility",
                            Label = "Fiches Jeunes Rosicruciens",
                            ParentId = 3000,
                            Path = "/registre/fiches-jeunes-rosicruciens"
                        },
                        new
                        {
                            Id = 3060,
                            Code = 3060,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "featured_play_list",
                            Label = "Saisie Présences",
                            ParentId = 3000,
                            Path = "/registre/traitements"
                        },
                        new
                        {
                            Id = 3061,
                            Code = 3061,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "list_alt",
                            Label = "Présence Villes",
                            ParentId = 3060,
                            Path = "/registre/traitements/encours"
                        },
                        new
                        {
                            Id = 3062,
                            Code = 3062,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "fact_check",
                            Label = "Présence CR",
                            ParentId = 3060,
                            Path = "/registre/traitements/termines"
                        },
                        new
                        {
                            Id = 3063,
                            Code = 3063,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "receipt_long",
                            Label = "Présence EI",
                            ParentId = 3060,
                            Path = "/registre/traitements/termines"
                        },
                        new
                        {
                            Id = 3070,
                            Code = 3070,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "insert_chart_outlined",
                            Label = "Statistiques",
                            ParentId = 3000,
                            Path = "/registre/statistiques"
                        },
                        new
                        {
                            Id = 3071,
                            Code = 3071,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "list_alt",
                            Label = "Présences",
                            ParentId = 3070,
                            Path = "/registre/statistiques/villes"
                        },
                        new
                        {
                            Id = 4000,
                            Code = 4000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "account_balance",
                            Label = "Comptabilité",
                            Path = "/compta"
                        },
                        new
                        {
                            Id = 4010,
                            Code = 4010,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "account_balance_wallet",
                            Label = "Compta en ligne",
                            ParentId = 4000,
                            Path = "/compta/comptes"
                        },
                        new
                        {
                            Id = 4020,
                            Code = 4020,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "settings",
                            Label = "Paramètre generaux",
                            ParentId = 4000,
                            Path = "/compta/parametres"
                        },
                        new
                        {
                            Id = 4030,
                            Code = 4030,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "monetization_on",
                            Label = "Sasie écritures répetitives",
                            ParentId = 4000,
                            Path = "/compta/ecritures"
                        },
                        new
                        {
                            Id = 4040,
                            Code = 4040,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "description",
                            Label = "Comptes/caisse",
                            ParentId = 4000,
                            Path = "/compta/comptescaisse"
                        },
                        new
                        {
                            Id = 10000,
                            Code = 10000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "code",
                            Label = "Développement",
                            Path = "/developpment",
                            PrefixIcon = "code",
                            SuffixIcon = "code"
                        },
                        new
                        {
                            Id = 5000,
                            Code = 5000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "admin_panel_settings",
                            Label = "Administation",
                            Path = "/administation"
                        },
                        new
                        {
                            Id = 50000,
                            Code = 50000,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "exit_to_app",
                            Label = "Deconnexion",
                            Path = "/logout"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "SYSADMIN",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrateur Systeme Full access"
                        },
                        new
                        {
                            Id = 200,
                            Code = "ADMIN_FULL_ACCESS",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrateur Full access"
                        },
                        new
                        {
                            Id = 300,
                            Code = "USER_MANAGER",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Manager des droits utilisateurs"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.StatutMembre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("StatutMembres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "Present",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Présent"
                        },
                        new
                        {
                            Id = 200,
                            Code = "Suivi",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Suivi"
                        },
                        new
                        {
                            Id = 300,
                            Code = "Absent",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Absent"
                        },
                        new
                        {
                            Id = 400,
                            Code = "Demissionnaire",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Démissionnaire"
                        },
                        new
                        {
                            Id = 500,
                            Code = "Decede",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Décédé"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.TypeActivitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TypeActivitees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "ServiceTempleInteresse",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Service du Temple pour membres interessés"
                        },
                        new
                        {
                            Id = 200,
                            Code = "ServiceApprofondissement",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Service du Temple d'approfondissement"
                        },
                        new
                        {
                            Id = 300,
                            Code = "WeekEndVille",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Week-end Ville"
                        },
                        new
                        {
                            Id = 400,
                            Code = "ConferenceRenouvellement",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conférence Renouvellement"
                        },
                        new
                        {
                            Id = 500,
                            Code = "ConferenceECS",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conférence ECS"
                        },
                        new
                        {
                            Id = 600,
                            Code = "ConferenceECC",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conférence ECC"
                        },
                        new
                        {
                            Id = 700,
                            Code = "ConferenceECS_ECC",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conférence ECS/ECC"
                        },
                        new
                        {
                            Id = 800,
                            Code = "ConventGraalCTO",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conférence Convent Graal CTO"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.TypeCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TypeCentres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "Renouvellement",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Centre de Renouvellement"
                        },
                        new
                        {
                            Id = 200,
                            Code = "Ville",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Centre de ville"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.TypeMembre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TypeMembres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Code = "PremierAspect",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Premier Aspect"
                        },
                        new
                        {
                            Id = 200,
                            Code = "DeuxiemeAspect",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deuxieme Aspect"
                        },
                        new
                        {
                            Id = 300,
                            Code = "ECS",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ecole de Conscience Supérieure"
                        },
                        new
                        {
                            Id = 400,
                            Code = "ECCLESIA",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ecclesia"
                        },
                        new
                        {
                            Id = 500,
                            Code = "GRAAL",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Graal"
                        },
                        new
                        {
                            Id = 600,
                            Code = "CinquiemeAspect",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cinquieme Aspect"
                        },
                        new
                        {
                            Id = 700,
                            Code = "SixiemeAspect",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sixieme Aspect"
                        },
                        new
                        {
                            Id = 800,
                            Code = "SeptiemeAspect",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Septieme Aspect"
                        },
                        new
                        {
                            Id = 900,
                            Code = "Interesse",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Interessé"
                        },
                        new
                        {
                            Id = 1000,
                            Code = "Jeunesse",
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jeunesse"
                        });
                });

            modelBuilder.Entity("Helios.Context.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MembreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MotDePasse")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MembreId")
                        .IsUnique();

                    b.ToTable("Utilisateurs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@rco.com",
                            MotDePasse = "AQAAAAIAAYagAAAAEEiNVE7GnBd6NNlBeIh1KHdEWcrYV3GpgaIw5NPr3hQ8LCK30Df1/LgmaUfSBliSLg=="
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin2@rco.com",
                            MotDePasse = "AQAAAAIAAYagAAAAEEiNVE7GnBd6NNlBeIh1KHdEWcrYV3GpgaIw5NPr3hQ8LCK30Df1/LgmaUfSBliSLg=="
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "usermanager@rco.com",
                            MotDePasse = "AQAAAAIAAYagAAAAEEiNVE7GnBd6NNlBeIh1KHdEWcrYV3GpgaIw5NPr3hQ8LCK30Df1/LgmaUfSBliSLg=="
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "usercentre@rco.com",
                            MotDePasse = "AQAAAAIAAYagAAAAEEiNVE7GnBd6NNlBeIh1KHdEWcrYV3GpgaIw5NPr3hQ8LCK30Df1/LgmaUfSBliSLg=="
                        });
                });

            modelBuilder.Entity("MembreMembre", b =>
                {
                    b.Property<int>("EnfantsId")
                        .HasColumnType("int");

                    b.Property<int>("ParentsId")
                        .HasColumnType("int");

                    b.HasKey("EnfantsId", "ParentsId");

                    b.HasIndex("ParentsId");

                    b.ToTable("ParentsEnfants", (string)null);
                });

            modelBuilder.Entity("RoleUtilisateur", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateursId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UtilisateursId");

                    b.HasIndex("UtilisateursId");

                    b.ToTable("RoleUtilisateur");

                    b.HasData(
                        new
                        {
                            RolesId = 100,
                            UtilisateursId = 1
                        },
                        new
                        {
                            RolesId = 200,
                            UtilisateursId = 2
                        },
                        new
                        {
                            RolesId = 300,
                            UtilisateursId = 2
                        });
                });

            modelBuilder.Entity("ActiviteeTypeMembre", b =>
                {
                    b.HasOne("Helios.Context.Models.Activitee", null)
                        .WithMany()
                        .HasForeignKey("ActiviteesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.TypeMembre", null)
                        .WithMany()
                        .HasForeignKey("AspectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Helios.Context.Models.Activitee", b =>
                {
                    b.HasOne("Helios.Context.Models.Centre", "Centre")
                        .WithMany("Activites")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.TypeActivitee", "TypeActivitee")
                        .WithMany("Activites")
                        .HasForeignKey("TypeActiviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centre");

                    b.Navigation("TypeActivitee");
                });

            modelBuilder.Entity("Helios.Context.Models.Centre", b =>
                {
                    b.HasOne("Helios.Context.Models.TypeCentre", "TypeCentre")
                        .WithMany("Centres")
                        .HasForeignKey("TypeCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeCentre");
                });

            modelBuilder.Entity("Helios.Context.Models.Droit", b =>
                {
                    b.HasOne("Helios.Context.Models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreId");

                    b.HasOne("Helios.Context.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.Utilisateur", "utilisateur")
                        .WithMany("Droits")
                        .HasForeignKey("utilisateurId");

                    b.Navigation("Centre");

                    b.Navigation("Module");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("Helios.Context.Models.Inscription", b =>
                {
                    b.HasOne("Helios.Context.Models.Activitee", "Activitee")
                        .WithMany("Inscriptions")
                        .HasForeignKey("ActiviteeId");

                    b.HasOne("Helios.Context.Models.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Activitee");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Helios.Context.Models.Membre", b =>
                {
                    b.HasOne("Helios.Context.Models.Centre", "Centre")
                        .WithMany("Membres")
                        .HasForeignKey("CentreId");

                    b.HasOne("Helios.Context.Models.Civilite", "Civilite")
                        .WithMany()
                        .HasForeignKey("CiviliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.StatutMembre", "StatutMembre")
                        .WithMany("Membres")
                        .HasForeignKey("StatutMembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.TypeMembre", "TypeMembre")
                        .WithMany("Membres")
                        .HasForeignKey("TypeMembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centre");

                    b.Navigation("Civilite");

                    b.Navigation("StatutMembre");

                    b.Navigation("TypeMembre");
                });

            modelBuilder.Entity("Helios.Context.Models.Module", b =>
                {
                    b.HasOne("Helios.Context.Models.Module", "Parent")
                        .WithMany("SousMenus")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Helios.Context.Models.Utilisateur", b =>
                {
                    b.HasOne("Helios.Context.Models.Membre", "Membre")
                        .WithOne("Utilisateur")
                        .HasForeignKey("Helios.Context.Models.Utilisateur", "MembreId");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("MembreMembre", b =>
                {
                    b.HasOne("Helios.Context.Models.Membre", null)
                        .WithMany()
                        .HasForeignKey("EnfantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.Membre", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUtilisateur", b =>
                {
                    b.HasOne("Helios.Context.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helios.Context.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UtilisateursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Helios.Context.Models.Activitee", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("Helios.Context.Models.Centre", b =>
                {
                    b.Navigation("Activites");

                    b.Navigation("Membres");
                });

            modelBuilder.Entity("Helios.Context.Models.Membre", b =>
                {
                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Helios.Context.Models.Module", b =>
                {
                    b.Navigation("SousMenus");
                });

            modelBuilder.Entity("Helios.Context.Models.StatutMembre", b =>
                {
                    b.Navigation("Membres");
                });

            modelBuilder.Entity("Helios.Context.Models.TypeActivitee", b =>
                {
                    b.Navigation("Activites");
                });

            modelBuilder.Entity("Helios.Context.Models.TypeCentre", b =>
                {
                    b.Navigation("Centres");
                });

            modelBuilder.Entity("Helios.Context.Models.TypeMembre", b =>
                {
                    b.Navigation("Membres");
                });

            modelBuilder.Entity("Helios.Context.Models.Utilisateur", b =>
                {
                    b.Navigation("Droits");
                });
#pragma warning restore 612, 618
        }
    }
}
